#!/usr/bin/env ruby

require 'rubygems'
require 'optparse'

$stdout.sync = true

class Push
  DEFAULT_OPTIONS = {
    heroku: false,
    migrate: false,
    commit: true,
    message: nil
  }

  def echo str, options = {}
    str = "| #{ str } |"
    dashes = str.length.times.map { '-' }.join
    hr = "\n#{ dashes }\n"
    message = (hr + str + hr)
    "echo \"#{ message }\"#{ ' && \\' unless options[:end] }"
  end

  def options
    @options ||= lambda { |options|
      parser = OptionParser.new do |opts|
        opts.banner = "Usage: deploy [-hm] <COMMIT-MESSAGE>"
        opts.on '-h', '--heroku', 'Deploys code to heroku' do
          options[:heroku] = true
        end
        opts.on '-m', '--migrate', 'Migrates after deploy' do |msg|
          options[:migrate] = true
        end
        opts.on '-c', '--no-commit', 'Don\'t try to commit, just push' do
          options[:commit] = false
        end
        opts.on '--help', "Shows this help message" do
          abort parser.help
        end
      end

      parser.parse!

      options[:message] = ARGV.shift
      abort parser.help if options[:commit] && !options[:message]

      # Return options
      options
    }.call(DEFAULT_OPTIONS)
  end

  def message
    push = ""

    if options[:commit]
      push += <<-COMMAND
        git add . && \
        #{ echo "Committing : '#{ options[:message] }' ..." }
        git commit -a -m "#{ options[:message] }" &&
      COMMAND
    end

    push += <<-COMMAND
      #{ echo "Pushing to master ..."}
      git push origin master &&
    COMMAND

    if options[:heroku]
      push += <<-COMMAND
        #{ echo "Deploying to Heroku master ..." }
        git push heroku master &&
      COMMAND
    end

    if options[:migrate]
      push += <<-COMMAND
        #{ echo "Running app's migrations" }
        heroku run "rake db:migrate" &&
      COMMAND
    end

    push += echo("Deployed !", end: true)
  end

  def self.run
    # Prepare message
    msg = self.new.message
    # Run and synchronously log stdout
    IO.popen(msg) do |f|
      puts f.gets until f.eof?
    end
  end
end

Push.run

