#!/usr/bin/env ruby

require 'rubygems'
require 'optparse'

$stdout.sync = true

class Push
  DEFAULT_OPTIONS = {
    app: nil,
    heroku: false,
    branch: "master",
    migrate: false,
    commit: true,
    pull: false,
    push: true,
    seed: false,
    promote: false,
    update: false,
    message: nil
  }

  def echo str, options = {}
    str = "| #{ str } |"
    dashes = str.length.times.map { '-' }.join
    message = "#{ dashes }\n#{ str }\n#{ dashes }"
    "echo \"#{ message }\""
  end

  def options
    @options ||= lambda { |options|
      @parser = OptionParser.new do |opts|
        opts.banner = "Usage: deploy [<options>] <COMMIT-MESSAGE>"

        opts.on '-b', '--branch BRANCH', 'Choose remote origin branch to push to' do |branch|
          options[:branch] = branch
        end

        opts.on '-a', '--app APP', 'Choose Heroku app to deploy to' do |app|
          options[:app] = app
        end

        opts.on '-h', '--heroku', 'Deploys code to Heroku' do
          options[:heroku] = true
        end

        opts.on '-m', '--migrate', 'Migrates after deploy' do
          options[:migrate] = true
        end

        opts.on '-c', '--no-commit', 'Don\'t try to commit, just push' do
          options[:commit] = false
        end

        opts.on '-n', '--no-push', 'Don\'t push, just deploy to Heroku' do
          options[:push] = false
        end

        opts.on '-p', '--pull', 'Pull origin remote branch before push. Exits if conflict exist' do
          options[:pull] = true
        end

        opts.on '-s', '--seed', 'Seed database after deploy' do
          options[:seed] = true
        end

        opts.on '-P', '--promote', 'Promote to Heroku pipeline downstream (ex: Staging -> Master)' do
          options[:promote] = true
        end

        opts.on '--update', 'Updates the deploy script from remote git repo' do
          options[:update] = true
        end
      end

      @parser.parse!

      options[:message] = ARGV.shift

      # Return options
      options
    }.call(DEFAULT_OPTIONS)
  end

  def message
    abort @parser.help if options[:commit] && !options[:message]

    push = ""

    if options[:push] && options[:commit]
      push += <<-COMMAND
        git add . && \
        #{ echo "Committing : '#{ options[:message] }' ..." } && \
        git commit -a -m "#{ options[:message] }" &&
      COMMAND
    end

    if options[:pull]
      push += <<-COMMAND
        #{ echo "Pulling #{ options[:branch] } ..." } && \
        git remote show origin | grep "local out of date" &>/dev/null; \
        if [ $? -ne 0 ]; then
          echo "Nothing to pull";
        else
          git pull origin #{ options[:branch] }
          git status | grep "working directory clean" &>/dev/null
          if [ $? -ne 0 ]; then
            echo "Need to merge, exiting ..."
            exit
          fi
        fi
      COMMAND
    end

    if options[:push]
      push += <<-COMMAND
        #{ echo "Pushing to #{ options[:branch] } ..."} && \
        git push origin #{ options[:branch] } &&
      COMMAND
    end

    if options[:heroku]
      push += <<-COMMAND
        #{ echo "Deploying to Heroku master ..." } && \
        git push heroku #{ options[:branch] }:master#{ app_option } &&
      COMMAND
    end

    if options[:migrate]
      push += <<-COMMAND
        #{ echo "Running app's migrations ..." } && \
        heroku run "bundle exec rake db:migrate"#{ app_option } &&
      COMMAND
    end

    if options[:seed]
      push += <<-COMMAND
        #{ echo "Seeding database ..." } && \
        heroku run "bundle exec rake db:seed"#{ app_option } &&
      COMMAND
    end

    if options[:promote]
      push += <<-COMMAND
        #{ echo "Promoting to downstream ..." } && \
        heroku pipeline:promote#{ app_option } &&
      COMMAND
    end

    push += echo("Deployed !")
  end

  def app_option
    options[:app] ? " --app #{ options[:app] }" : ""
  end

  def update!
    command = <<-COMMAND
      #{ echo "Updating deploy ..." } && \
      git clone git@github.com:vala/deploy /tmp/deploy && \
      echo "\nPassword will be required to move executable to /usr/bin/deploy" && \
      sudo mv /tmp/deploy/deploy /usr/bin/deploy && \
      rm -rf /tmp/deploy && \
      #{ echo "Updated !" }
    COMMAND

    IO.popen(command) do |f|
      puts f.gets until f.eof?
    end
  end

  def run
    if options[:update]
      update!
    else
      # Store start time
      start_time = Time.now
      # Run and synchronously log stdout
      execute(message)
      # Store deploy duration
      time = Time.now - start_time
      puts "\n -> Time : #{ time } seconds"
    end
  end

  def execute command
    IO.popen(message) do |f|
      puts f.gets until f.eof?
    end
  end
end

# Instantiate and run
Push.new.run
